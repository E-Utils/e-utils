(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.EUtils = factory());
}(this, (function () { 'use strict';

  /**
   * Date format and output the formatted date;
   *
   * @since 1.0.0
   * @category date;
   * @author yhm1694;
   * @param { number | Date } date, the origin date which you want to format;
   * @param { string } format, the format that the date you want to output;
   * @return { string } formatDate, return the formatted date;
   * @create_date 2018/07/15;
   * @modify_date 2018/07/15;
   *
   * @example
   *
   * dateFormat(1531643785284, 'yyyy-MM-dd');
   *
   * // => '2018-07-15'
   */

  var dateFormat = function (date, format) {
    if (!format) {
      return date;
    }

    var formattedDate = format;
    date = new Date(date);

    var regObj = {
      'M+': date.getMonth() + 1,
      'd+': date.getDate(),
      'h+': date.getHours(),
      'm+': date.getMinutes(),
      's+': date.getSeconds(),
      'q+': Math.floor((date.getMonth() + 3) / 3),
      'S': date.getMilliseconds(),
    };
    var keys = Object.keys(regObj);

    if (/(y+)/.test(format)) {
      formattedDate = format.replace(
        RegExp.$1,
        (("" + (date.getFullYear()))).substr(4 - RegExp.$1.length));
    }

    keys.forEach(function (item) {
      if ((new RegExp(("(" + item + ")"))).test(format)) {
        formattedDate = formattedDate.replace(
          RegExp.$1,
          (RegExp.$1.length === 1) ?
            (regObj[item]) : ((("00" + (regObj[item]))).substr((("" + (regObj[item]))).length)));
      }
    });

    return formattedDate;
  };

  /**
   * set url param by object
   *
   * @since 1.0.0;
   * @category Object;
   * @author jiaguishan;
   * @param paramsObject {Object} param object;
   * @return no return
   * @create_date 2018/07/09;
   * @modify_date 2018/07/18;
   * @example
   *
   * current location href => http://web.ewt360.com
   * setUrlParam({
   *     id: 1,
   *     token: '807341-111-111aaa7a7a'
   * })
   * // => 'http://web.ewt360.com?id=1&token=807341-111-111aaa7a7a'
   *
   * current location href => http://web.ewt360.com?id=2
   * setUrlParam({
   *     id: 1,
   *     token: '807341-111-111aaa7a7a'
   * }, 'http://www.ewt360.com')
   * // => 'http://www.ewt360.com?id=1&token=807341-111-111aaa7a7a'
   */
  function setUrlParam(targetParams, originUrl) {
    if ( originUrl === void 0 ) originUrl = window.location.href;

    var resultUrl = originUrl;
    Object
      .entries(targetParams)
      .forEach(function (ref) {
        var key = ref[0];
        var value = ref[1];

        var replaceReg = new RegExp(("(^|)" + key + "=([^&]*)(|$)"));
        var replaceText = key + "=" + value;
        if (resultUrl.match(replaceReg)) {
          var tmpReg = new RegExp(("(" + key + "=)([^&]*)"), 'gi');
          resultUrl = resultUrl.replace(tmpReg, replaceText);
        } else {
          var joinFlag = resultUrl.match('[?]')
            ? '&'
            : '?';
          resultUrl = "" + resultUrl + joinFlag + replaceText;
        }
      });
    return resultUrl;
  }

  /**
   * get url param by name
   *
   * @since 1.0.0;
   * @category string;
   * @author jiaguishan;
   * @param name {string} param key;
   * @return {string};
   * @create_date 2018/07/09;
   * @modify_date 2018/07/18;
   * @example
   *
   * getUrlParam('token')
   * // => '807351-999-1asdni7asdn61621e8'
   */
  function getUrlParam(key, originUrl) {
    var reg = new RegExp('(^|&)'.concat(key).concat('=([^&]*)(&|$)'), 'i');
    originUrl = originUrl ? originUrl.toString() : window.location.href;
    var index = originUrl.indexOf('?');
    var result = originUrl
      .substr(index + 1)
      .match(reg);
    if (result != null) {
      return unescape(result[2]);
    }
    return '';
  }

  /**
   * Replaces matches for `pattern` in `string` with `replacement`,
   * default is not global repalce,
   * also 0x00000-0xfffff characters replace.
   *
   * @since 1.0.0;
   * @category string;
   * @author fl;
   * @param str {string} the first string incoming;
   * @param pattern {string|regexp} the second (string|regexp) incoming;
   * @param replacement {string} the third string incoming;
   * @return {string};
   * @create_date 2018/07/06;
   * @modify_date 2018/07/06;
   * @example
   *
   * replace('hello world', /o/, 'hi')
   * // => 'hellhi world'
   */

  function replace() {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var str = "" + (args[0]);
    return args.length < 3 ? str : str.replace(args[1], args[2]);
  }

  /**
   * Replace global characters,
   * also 0x00000-0xfffff characters replace.
   *
   * @since 1.0.0;
   * @category string;
   * @author fl2294;
   * @param str {string} the first string incoming;
   * @param sourcement {string} the second (string|regexp) incoming;
   * @param replacement {string} the second string incoming;
   * @return {string};
   * @create_date 2018/07/06;
   * @modify_date 2018/07/06;
   * @example
   *
   * replaceAll('𠮷abcdef𠮷Acdef', /𠮷/, 'k')
   * // => 'kabcdefkAcdef'
   */

  function replaceAll() {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    if (args.length < 3) { return args[0]; }
    var str = args[0];
    var sourcement = args[1];
    var replacement = args[2];
    var raRegExp;
    var strType = Object.prototype.toString.call(sourcement);
    if(strType === '[object RegExp]') {
      var _sourcement = sourcement;
      if(_sourcement.flags.indexOf('g') <= -1) {
        _sourcement = RegExp(_sourcement.source, _sourcement.flags + 'g');
      }
      raRegExp = _sourcement;
    }
    if(strType === '[object String]') {
      raRegExp = new RegExp(sourcement, 'g');
    }
    return str.replace(raRegExp, replacement);
  }

  /**
   * Remove specified characters before and after,
   * also support 0x00000-0xfffff characters remove.
   *
   * @since 1.0.0;
   * @category string;
   * @author fl2294;
   * @param str {string} the first string incoming;
   * @param chars {string} the second string incoming;
   * @return {string};
   * @create_date 2018/07/06;
   * @modify_date 2018/07/06;
   * @example
   *
   * trim('#sadcdba#s', '#s') trim('  dsa  ') trim('𠮷abbb𠮷a', '𠮷a')
   * // => 'adcdba'  'dsa'  'bbb'
   */

  function trim(str, chars) {
    if (str && chars === undefined) {
      return str.trim();
    }
    if (!str || !chars) {
      return str;
    }
    var r = "(^" + chars + ")|(" + chars + "$)";
    str = str.replace(new RegExp(r, 'gu'), '');
    return str;
  }

  /**
   * All down to uppercase
   *
   * @since 1.0.0;
   * @category string;
   * @author fl2294;
   * @param str {string} the first string incoming;
   * @return {string};
   * @create_date 2018/07/06;
   * @modify_date 2018/07/06;
   * @example
   *
   * toUpper('aaa')
   * // => 'AAA'
   */

  function toUpper(str) {
    return str.toUpperCase();
  }

  /**
   * All down to lowercase.
   *
   * @since 1.0.0;
   * @category string;
   * @author fl2294;
   * @param str {string} the first string incoming;
   * @return {string};
   * @create_date 2018/07/06;
   * @modify_date 2018/07/06;
   * @example
   *
   * toLower(’AAA')
   * // => 'aaa'
   */

  function toLower(str) {
    return str.toLowerCase();
  }

  /**
   * Generate UUID, maybe used to render react list;
   *
   * @since 1.1.0
   * @category string;
   * @author yhm1694;
   * @return { string } uuid;
   * @create_date 2018/08/22;
   * @modify_date 2018/08/22;
   *
   * @example
   *
   * generateUUID();
   *
   * // => 'af22-3fa8-4028-8dea-30a2'
   */

  var generateUUID = function () {
    var uuid =  'xxxx-xxxx-xxxx-xxxx-xxxx'.replace(/[xy]/g, function(char) {
      var randomNum = Math.random() * 16 | 0;
      var newChar = char === 'x' ? randomNum : (randomNum & 0x3 | 0x8);

      return newChar.toString(16);
    });

    return uuid;
  };

  var index = {
    dateFormat: dateFormat,
    setUrlParam: setUrlParam,
    getUrlParam: getUrlParam,
    replaceAll: replaceAll,
    replace: replace,
    trim: trim,
    toUpper: toUpper,
    toLower: toLower,
    generateUUID: generateUUID,
  };

  return index;

})));
//# sourceMappingURL=eutils.min.js.map
