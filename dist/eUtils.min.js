(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (factory());
}(this, (function () { 'use strict';

  /**
   * Generate UUID, maybe used to render react list;
   *
   * @since 1.1.0
   * @category string;
   * @author yhm1694;
   * @return { string } uuid;
   * @create_date 2018/08/22;
   * @modify_date 2018/08/22;
   *
   * @example
   *
   * generateUUID();
   *
   * // => 'af22-3fa8-4028-8dea-30a2'
   */

  const generateUUID = () => {
    const uuid =  'xxxx-xxxx-xxxx-xxxx-xxxx'.replace(/[x]/g, function() {
      const randomNum = Math.random() * 16 | 0;
      const newChar = randomNum.toString(16);

      return newChar;
    });

    return uuid;
  };

  /**
   * All down to uppercase
   *
   * @since 1.0.0;
   * @category string;
   * @author fl2294;
   * @param str {string} the first string incoming;
   * @return {string};
   * @create_date 2018/07/06;
   * @modify_date 2018/07/06;
   * @example
   *
   * toUpper('aaa')
   * // => 'AAA'
   */

  function toUpper(str) {
    return str.toUpperCase();
  }

  /**
   * Remove specified characters before and after,
   * also support 0x00000-0xfffff characters remove.
   *
   * @since 1.0.0;
   * @category string;
   * @author fl2294;
   * @param str {string} the first string incoming;
   * @param chars {string} the second string incoming;
   * @return {string};
   * @create_date 2018/07/06;
   * @modify_date 2018/07/06;
   * @example
   *
   * trim('#sadcdba#s', '#s') trim('  dsa  ') trim('𠮷abbb𠮷a', '𠮷a')
   * // => 'adcdba'  'dsa'  'bbb'
   */

  function trim(str, chars) {
    if (str && chars === undefined) {
      return str.trim();
    }
    if (!str || !chars) {
      return str;
    }
    const r = `(^${chars})|(${chars}$)`;
    str = str.replace(new RegExp(r, 'gu'), '');
    return str;
  }

  /**
   * Replace global characters,
   * also 0x00000-0xfffff characters replace.
   *
   * @since 1.0.0;
   * @category string;
   * @author fl2294;
   * @param str {string} the first string incoming;
   * @param sourcement {string} the second (string|regexp) incoming;
   * @param replacement {string} the second string incoming;
   * @return {string};
   * @create_date 2018/07/06;
   * @modify_date 2018/07/06;
   * @example
   *
   * replaceAll('𠮷abcdef𠮷Acdef', /𠮷/, 'k')
   * // => 'kabcdefkAcdef'
   */

  function replaceAll(...args) {
    if (args.length < 3) return args[0];
    const str = args[0];
    const sourcement = args[1];
    const replacement = args[2];
    let raRegExp;
    const strType = Object.prototype.toString.call(sourcement);
    if(strType === '[object RegExp]') {
      let _sourcement = sourcement;
      if(_sourcement.flags.indexOf('g') <= -1) {
        _sourcement = RegExp(_sourcement.source, _sourcement.flags + 'g');
      }
      raRegExp = _sourcement;
    }
    if(strType === '[object String]') {
      raRegExp = new RegExp(sourcement, 'g');
    }
    return str.replace(raRegExp, replacement);
  }

  // import setUrlParam from './setUrlParam';
  // import getUrlParam from './getUrlParam';
  // import replace from './replace';
  // import replaceAll from './replaceAll';
  // import trim from './trim';
  // import toUpper from './toUpper';
  // import toLower from './toLower';
  // import generateUUID from './generateUUID';
  // import union from './union';
  // import intersection from './intersection';
  // import minus from './minus';
  // import unique from './unique';
  // import indexOf from './indexOf';
  // import setCookie from './setCookie';
  // import getCookie from './getCookie';
  // import removeCookie from './removeCookie';
  //
  // export default {
  //   dateFormat,
  //   setUrlParam,
  //   getUrlParam,
  //   replaceAll,
  //   replace,
  //   trim,
  //   toUpper,
  //   toLower,
  //   generateUUID,
  //   union,
  //   intersection,
  //   minus,
  //   unique,
  //   indexOf,
  //   setCookie,
  //   getCookie,
  //   removeCookie
  // };

  console.log(replaceAll('sasasa', 's', 'j'));
  console.log(trim('skasasask', 'sk'));
  console.log(toUpper('sasasa'));
  console.log(generateUUID());

})));
//# sourceMappingURL=eutils.min.js.map
