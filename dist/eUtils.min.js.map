{"version":3,"file":"eutils.min.js","sources":["../src/index.js","../src/dateFormat.js","../src/getUrlParam.js","../src/replaceAll.js","../src/replace.js","../src/trim.js","../src/toUpper.js","../src/toLower.js","../src/generateUUID.js","../src/indexOf.js"],"sourcesContent":["import dateFormat from './dateFormat';\n// import setUrlParam from './setUrlParam';\nimport getUrlParam from './getUrlParam';\nimport replace from './replace';\nimport replaceAll from './replaceAll';\nimport trim from './trim';\nimport toUpper from './toUpper';\nimport toLower from './toLower';\nimport generateUUID from './generateUUID';\n// import union from './union';\n// import intersection from './intersection';\n// import minus from './minus';\n// import unique from './unique';\nimport indexOf from './indexOf';\n\nexport default {\n  dateFormat,\n  // setUrlParam,\n  getUrlParam,\n  replaceAll,\n  replace,\n  trim,\n  toUpper,\n  toLower,\n  generateUUID,\n  // union,\n  // intersection,\n  // minus,\n  // unique,\n  indexOf,\n};\n","/**\n * Date format and output the formatted date;\n *\n * @since 1.0.0\n * @category date;\n * @author yhm1694;\n * @param { number | Date } date, the origin date which you want to format;\n * @param { string } format, the format that the date you want to output;\n * @return { string } formatDate, return the formatted date;\n * @create_date 2018/07/15;\n * @modify_date 2018/07/15;\n *\n * @example\n *\n * dateFormat(1531643785284, 'yyyy-MM-dd');\n *\n * // => '2018-07-15'\n */\n\nconst dateFormat = (date, format) => {\n  if (!format) {\n    return date;\n  }\n\n  let formattedDate = format;\n  date = new Date(date);\n\n  const regObj = {\n    'M+': date.getMonth() + 1,\n    'd+': date.getDate(),\n    'h+': date.getHours(),\n    'm+': date.getMinutes(),\n    's+': date.getSeconds(),\n    'q+': Math.floor((date.getMonth() + 3) / 3),\n    'S': date.getMilliseconds(),\n  };\n  const keys = Object.keys(regObj);\n\n  if (/(y+)/.test(format)) {\n    formattedDate = format.replace(\n      RegExp.$1,\n      (`${date.getFullYear()}`).substr(4 - RegExp.$1.length));\n  }\n\n  keys.forEach((item) => {\n    if ((new RegExp(`(${item})`)).test(format)) {\n      formattedDate = formattedDate.replace(\n        RegExp.$1,\n        (RegExp.$1.length === 1) ?\n          (regObj[item]) : ((`00${regObj[item]}`).substr((`${regObj[item]}`).length)));\n    }\n  });\n\n  return formattedDate;\n};\n\nexport default dateFormat;\n","/**\n * get url param by name\n *\n * @since 1.0.0;\n * @category string;\n * @author jiaguishan;\n * @param name {string} param key;\n * @return {string};\n * @create_date 2018/07/09;\n * @modify_date 2018/07/18;\n * @example\n *\n * getUrlParam('token')\n * // => '807351-999-1asdni7asdn61621e8'\n */\nfunction getUrlParam(key, originUrl) {\n  const reg = new RegExp('(^|&)'.concat(key).concat('=([^&]*)(&|$)'), 'i');\n  originUrl = originUrl ? originUrl.toString() : window.location.href;\n  const index = originUrl.indexOf('?');\n  const result = originUrl\n    .substr(index + 1)\n    .match(reg);\n  if (result != null) {\n    return unescape(result[2]);\n  }\n  return '';\n}\n\nexport default getUrlParam;\n","/**\n * Replace global characters,\n * also 0x00000-0xfffff characters replace.\n *\n * @since 1.0.0;\n * @category string;\n * @author fl2294;\n * @param str {string} the first string incoming;\n * @param sourcement {string} the second (string|regexp) incoming;\n * @param replacement {string} the second string incoming;\n * @return {string};\n * @create_date 2018/07/06;\n * @modify_date 2018/07/06;\n * @example\n *\n * replaceAll('𠮷abcdef𠮷Acdef', /𠮷/, 'k')\n * // => 'kabcdefkAcdef'\n */\n\nfunction replaceAll(...args) {\n  if (args.length < 3) return args[0];\n  const str = args[0];\n  const sourcement = args[1];\n  const replacement = args[2];\n  let raRegExp;\n  const strType = Object.prototype.toString.call(sourcement);\n  if(strType === '[object RegExp]') {\n    let _sourcement = sourcement;\n    if(_sourcement.flags.indexOf('g') <= -1) {\n      _sourcement = RegExp(_sourcement.source, _sourcement.flags + 'g');\n    }\n    raRegExp = _sourcement;\n  }\n  if(strType === '[object String]') {\n    raRegExp = new RegExp(sourcement, 'g');\n  }\n  return str.replace(raRegExp, replacement);\n}\n\nexport default replaceAll;\n","/**\n * Replaces matches for `pattern` in `string` with `replacement`,\n * default is not global repalce,\n * also 0x00000-0xfffff characters replace.\n *\n * @since 1.0.0;\n * @category string;\n * @author fl;\n * @param str {string} the first string incoming;\n * @param pattern {string|regexp} the second (string|regexp) incoming;\n * @param replacement {string} the third string incoming;\n * @return {string};\n * @create_date 2018/07/06;\n * @modify_date 2018/07/06;\n * @example\n *\n * replace('hello world', /o/, 'hi')\n * // => 'hellhi world'\n */\n\nfunction replace(...args) {\n  const str = `${args[0]}`;\n  return args.length < 3 ? str : str.replace(args[1], args[2]);\n}\n\nexport default replace;\n","/**\n * Remove specified characters before and after,\n * also support 0x00000-0xfffff characters remove.\n *\n * @since 1.0.0;\n * @category string;\n * @author fl2294;\n * @param str {string} the first string incoming;\n * @param chars {string} the second string incoming;\n * @return {string};\n * @create_date 2018/07/06;\n * @modify_date 2018/07/06;\n * @example\n *\n * trim('#sadcdba#s', '#s') trim('  dsa  ') trim('𠮷abbb𠮷a', '𠮷a')\n * // => 'adcdba'  'dsa'  'bbb'\n */\n\nfunction trim(str, chars) {\n  if (str && chars === undefined) {\n    return str.trim();\n  }\n  if (!str || !chars) {\n    return str;\n  }\n  const r = `(^${chars})|(${chars}$)`;\n  str = str.replace(new RegExp(r, 'gu'), '');\n  return str;\n}\n\nexport default trim;\n","/**\n * All down to uppercase\n *\n * @since 1.0.0;\n * @category string;\n * @author fl2294;\n * @param str {string} the first string incoming;\n * @return {string};\n * @create_date 2018/07/06;\n * @modify_date 2018/07/06;\n * @example\n *\n * toUpper('aaa')\n * // => 'AAA'\n */\n\nfunction toUpper(str) {\n  return str.toUpperCase();\n}\n\nexport default toUpper;\n","/**\n * All down to lowercase.\n *\n * @since 1.0.0;\n * @category string;\n * @author fl2294;\n * @param str {string} the first string incoming;\n * @return {string};\n * @create_date 2018/07/06;\n * @modify_date 2018/07/06;\n * @example\n *\n * toLower(’AAA')\n * // => 'aaa'\n */\n\nfunction toLower(str) {\n  return str.toLowerCase();\n}\n\nexport default toLower;\n","/**\n * Generate UUID, maybe used to render react list;\n *\n * @since 1.1.0\n * @category string;\n * @author yhm1694;\n * @return { string } uuid;\n * @create_date 2018/08/22;\n * @modify_date 2018/08/22;\n *\n * @example\n *\n * generateUUID();\n *\n * // => 'af22-3fa8-4028-8dea-30a2'\n */\n\nconst generateUUID = () => {\n  const uuid =  'xxxx-xxxx-xxxx-xxxx-xxxx'.replace(/[x]/g, function() {\n    const randomNum = Math.random() * 16 | 0;\n    const newChar = randomNum.toString(16);\n\n    return newChar;\n  });\n\n  return uuid;\n};\n\nexport default generateUUID;\n ","/**\n * indexOf, Find where a specified string value first appears in the string\n *\n * @since 1.0.0;\n * @category array;\n * @author jiaguishan;\n * @param array {array} origin array;\n * @param value {number/string} find value;\n * @param fromIndex {number} start number;\n * @return {number};\n * @create_date 2018/08/27;\n * @modify_date 2018/08/27;\n * @example\n *\n * indexOf([1, 2, 1, 2], 2)\n * // => 1\n *\n * // Search from the `fromIndex`\n * indexOf([1, 2, 1, 2], 2, 2)\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  const length = array === null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  let index = fromIndex ? +fromIndex : 0;\n  if (index < 0) {\n    index = Math.max(length + index, 0);\n  }\n  index = index - 1;\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nexport default indexOf;\n"],"names":["date","format","formattedDate","regObj","Date","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","getMilliseconds","keys","Object","test","replace","RegExp","$1","getFullYear","substr","length","forEach","item","key","originUrl","reg","concat","index","toString","window","location","href","indexOf","result","match","unescape","arguments","str","sourcement","replacement","raRegExp","strType","prototype","call","_sourcement","flags","source","chars","undefined","trim","r","toUpperCase","toLowerCase","random","array","value","fromIndex","max"],"mappings":"wLAee,YCII,SAACA,EAAMC,OACnBA,SACID,MAGLE,EAAgBD,EAGdE,EAAS,SAFR,IAAIC,KAAKJ,IAGHK,WAAa,OAClBL,EAAKM,eACLN,EAAKO,gBACLP,EAAKQ,kBACLR,EAAKS,kBACLC,KAAKC,OAAOX,EAAKK,WAAa,GAAK,KACpCL,EAAKY,mBAENC,EAAOC,OAAOD,KAAKV,SAErB,OAAOY,KAAKd,OACEA,EAAOe,QACrBC,OAAOC,OACHlB,EAAKmB,eAAiBC,OAAO,EAAIH,OAAOC,GAAGG,YAG9CC,QAAQ,SAACC,GACP,IAAIN,WAAWM,OAAUR,KAAKd,OACjBC,EAAcc,QAC5BC,OAAOC,GACe,IAArBD,OAAOC,GAAGG,OACRlB,EAAOoB,SAAgBpB,EAAOoB,IAASH,WAAWjB,EAAOoB,IAASF,YAIpEnB,eCtCT,SAAqBsB,EAAKC,OAClBC,EAAM,IAAIT,OAAO,QAAQU,OAAOH,GAAKG,OAAO,iBAAkB,KAE9DC,KADMH,EAAYA,EAAUI,WAAaC,OAAOC,SAASC,MACvCC,QAAQ,KAC1BC,EAAST,EACZL,OAAOQ,EAAQ,GACfO,MAAMT,UACK,MAAVQ,EACKE,SAASF,EAAO,IAElB,eCNT,cACMG,UAAKhB,OAAS,EAAG,mDACfiB,0CACAC,0CACAC,0CACFC,SACEC,EAAU5B,OAAO6B,UAAUd,SAASe,KAAKL,MAChC,oBAAZG,EAA+B,KAC5BG,EAAcN,EACfM,EAAYC,MAAMb,QAAQ,OAAS,MACtBhB,OAAO4B,EAAYE,OAAQF,EAAYC,MAAQ,QAEpDD,QAEE,oBAAZH,MACU,IAAIzB,OAAOsB,EAAY,MAE7BD,EAAItB,QAAQyB,EAAUD,YChB/B,eACQF,sDACCD,UAAKhB,OAAS,EAAIiB,EAAMA,EAAItB,+FCJrC,SAAcsB,EAAKU,MACbV,QAAiBW,IAAVD,SACFV,EAAIY,WAERZ,IAAQU,SACJV,MAEHa,OAASH,QAAWA,gBACpBV,EAAItB,QAAQ,IAAIC,OAAOkC,EAAG,MAAO,aCVzC,SAAiBb,UACRA,EAAIc,uBCDb,SAAiBd,UACRA,EAAIe,4BCAQ,iBACL,2BAA2BrC,QAAQ,OAAQ,kBACrB,GAAhBN,KAAK4C,SAAgB,GACbzB,SAAS,eCCvC,SAAiB0B,EAAOC,EAAOC,OACvBpC,EAAmB,OAAVkC,EAAiB,EAAIA,EAAMlC,WACrCA,SACK,MAENO,EAAQ6B,GAAaA,EAAY,MACjC7B,EAAQ,MACFlB,KAAKgD,IAAIrC,EAASO,EAAO,OAEnB,IACPA,EAAQP,MACXkC,EAAM3B,KAAW4B,SACZ5B,SAGH"}